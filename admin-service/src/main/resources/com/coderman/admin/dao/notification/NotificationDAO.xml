<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coderman.admin.dao.notification.NotificationDAO">
  <resultMap id="BaseResultMap" type="com.coderman.admin.model.notification.NotificationModel">
    <id column="notification_id" jdbcType="INTEGER" property="notificationId" />
    <result column="notification_type" jdbcType="VARCHAR" property="notificationType" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="read_time" jdbcType="TIMESTAMP" property="readTime" />
    <result column="is_processed" jdbcType="TINYINT" property="isProcessed" />
    <result column="is_mark" jdbcType="TINYINT" property="isMark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.coderman.admin.model.notification.NotificationModel">
    <result column="data" jdbcType="LONGVARCHAR" property="data" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    notification_id, notification_type, user_id, read_time, is_processed, is_mark, create_time, 
    update_time
  </sql>
  <sql id="Blob_Column_List">
    data
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.coderman.admin.model.notification.NotificationExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from auth_notification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.coderman.admin.model.notification.NotificationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from auth_notification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from auth_notification
    where notification_id = #{notificationId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from auth_notification
    where notification_id = #{notificationId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.coderman.admin.model.notification.NotificationExample">
    delete from auth_notification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.coderman.admin.model.notification.NotificationModel">
    insert into auth_notification (notification_id, notification_type, 
      user_id, read_time, is_processed, 
      is_mark, create_time, update_time, 
      data)
    values (#{notificationId,jdbcType=INTEGER}, #{notificationType,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{readTime,jdbcType=TIMESTAMP}, #{isProcessed,jdbcType=TINYINT}, 
      #{isMark,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{data,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.coderman.admin.model.notification.NotificationModel">
    insert into auth_notification
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="notificationId != null">
        notification_id,
      </if>
      <if test="notificationType != null">
        notification_type,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="readTime != null">
        read_time,
      </if>
      <if test="isProcessed != null">
        is_processed,
      </if>
      <if test="isMark != null">
        is_mark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="data != null">
        data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="notificationId != null">
        #{notificationId,jdbcType=INTEGER},
      </if>
      <if test="notificationType != null">
        #{notificationType,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="readTime != null">
        #{readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isProcessed != null">
        #{isProcessed,jdbcType=TINYINT},
      </if>
      <if test="isMark != null">
        #{isMark,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="data != null">
        #{data,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.coderman.admin.model.notification.NotificationExample" resultType="java.lang.Long">
    select count(*) from auth_notification
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update auth_notification
    <set>
      <if test="record.notificationId != null">
        notification_id = #{record.notificationId,jdbcType=INTEGER},
      </if>
      <if test="record.notificationType != null">
        notification_type = #{record.notificationType,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.readTime != null">
        read_time = #{record.readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isProcessed != null">
        is_processed = #{record.isProcessed,jdbcType=TINYINT},
      </if>
      <if test="record.isMark != null">
        is_mark = #{record.isMark,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.data != null">
        data = #{record.data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update auth_notification
    set notification_id = #{record.notificationId,jdbcType=INTEGER},
      notification_type = #{record.notificationType,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      read_time = #{record.readTime,jdbcType=TIMESTAMP},
      is_processed = #{record.isProcessed,jdbcType=TINYINT},
      is_mark = #{record.isMark,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      data = #{record.data,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update auth_notification
    set notification_id = #{record.notificationId,jdbcType=INTEGER},
      notification_type = #{record.notificationType,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      read_time = #{record.readTime,jdbcType=TIMESTAMP},
      is_processed = #{record.isProcessed,jdbcType=TINYINT},
      is_mark = #{record.isMark,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.coderman.admin.model.notification.NotificationModel">
    update auth_notification
    <set>
      <if test="notificationType != null">
        notification_type = #{notificationType,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="readTime != null">
        read_time = #{readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isProcessed != null">
        is_processed = #{isProcessed,jdbcType=TINYINT},
      </if>
      <if test="isMark != null">
        is_mark = #{isMark,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="data != null">
        data = #{data,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where notification_id = #{notificationId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.coderman.admin.model.notification.NotificationModel">
    update auth_notification
    set notification_type = #{notificationType,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      read_time = #{readTime,jdbcType=TIMESTAMP},
      is_processed = #{isProcessed,jdbcType=TINYINT},
      is_mark = #{isMark,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      data = #{data,jdbcType=LONGVARCHAR}
    where notification_id = #{notificationId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.coderman.admin.model.notification.NotificationModel">
    update auth_notification
    set notification_type = #{notificationType,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      read_time = #{readTime,jdbcType=TIMESTAMP},
      is_processed = #{isProcessed,jdbcType=TINYINT},
      is_mark = #{isMark,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where notification_id = #{notificationId,jdbcType=INTEGER}
  </update>

  <select id="getUnreadNotificationCountByType" resultType="java.util.Map">
    SELECT
      notification_type,
      COUNT(1) AS unread_count
    FROM
      auth_notification
    WHERE
      user_id = #{userId} and  read_time IS NULL
    GROUP BY
      notification_type
  </select>
</mapper>